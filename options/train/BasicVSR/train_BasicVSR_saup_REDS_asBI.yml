# general settings
name: BasicVSR_saup_REDS_asBI
model_type: ASVideoRecurrentModel
# scale: !!python/tuple [2, 2]
num_gpu: auto  # official: 8 GPUs
manual_seed: 10

# dataset and data loader settings
datasets:
  train:
    name: REDS
    type: ASREDSRecurrentDataset
    # dataroot_gt: datasets/REDS/train_sharp
    # dataroot_lq: datasets/REDS/train_sharp_bicubic/X4
    dataroot_gt: datasets/REDS/train_sharp_with_val.lmdb
    dataroot_lq: datasets/REDS/train_sharp_bicubic_with_val.lmdb
    meta_info_file: lbasicsr/data/meta_info/meta_info_REDS_GT.txt
    val_partition: REDS4  # set to 'official' when use the official validation partition
    test_mode: False
    io_backend:
      type: lmdb

    num_frame: 15
    # arbitrary scale dataset --------------------------
    lq_size: 60
    max_scale: 4                        # max GT patch: lq_size*max_scale
    downsample_mode: torch              # [torch, core, numpy]
    init_int_scale: true                # scale x2, x3, x4 for 1 epoch
    single_scale_ft: false              # only a scale
    # CL_train_set: [120, 3, 5]         # Continuous learning training strategy
    # --------------------------------------------------
    gt_size: 256                        # if ASREDSRecurrentDataset, not needed
    interval_list: [1]
    random_reverse: false
    use_hflip: true
    use_rot: true

    # data loader
    num_worker_per_gpu: 6
    batch_size_per_gpu: 4
    dataset_enlarge_ratio: 1
    prefetch_mode: ~

  val_1:
    name: REDS4_x4
    type: ASVideoRecurrentTestDataset
    dataroot_gt: datasets/REDS4/GT
    dataroot_lq: datasets/REDS4/sharp_bicubic

    cache_data: true
    io_backend:
      type: disk

    num_frame: -1  # not needed
    # arbitrary scale dataset --------------------------
    use_arbitrary_scale_downsampling: true
    downsampling_scale: !!python/tuple [4, 4]
    downsampling_mode: torch
    # --------------------------------------------------
  
  val_2:
    name: REDS4_x3
    type: ASVideoRecurrentTestDataset
    dataroot_gt: datasets/REDS4/GT
    dataroot_lq: datasets/REDS4/sharp_bicubic

    cache_data: true
    io_backend:
      type: disk

    num_frame: -1  # not needed
    # arbitrary scale dataset --------------------------
    use_arbitrary_scale_downsampling: true
    downsampling_scale: !!python/tuple [3, 3]
    downsampling_mode: torch
    # --------------------------------------------------
  
  val_3:
    name: REDS4_x2
    type: ASVideoRecurrentTestDataset
    dataroot_gt: datasets/REDS4/GT
    dataroot_lq: datasets/REDS4/sharp_bicubic

    cache_data: true
    io_backend:
      type: disk

    num_frame: -1  # not needed
    # arbitrary scale dataset --------------------------
    use_arbitrary_scale_downsampling: true
    downsampling_scale: !!python/tuple [2, 2]
    downsampling_mode: torch
    # --------------------------------------------------

# network structures
network_g:
  type: BasicVSR_saup
  num_feat: 64
  num_block: 30
  spynet_path: experiments/pretrained_models/flownet/spynet_sintel_final-3d2a1287.pth

# path
path:
  pretrain_network_g: experiments/pretrained_models/BasicVSR/BasicVSR_REDS4-543c8261.pth
  strict_load_g: false
  resume_state: ~

# training settings
train:
  ema_decay: 0.999
  optim_g:
    type: Adam
    lr: !!float 1e-4    # 2e-4
    weight_decay: 0
    betas: [0.9, 0.99]

  scheduler:
    type: CosineAnnealingRestartLR
    periods: [100000]   # 300000
    restart_weights: [1]
    eta_min: !!float 1e-7

  total_iter: 100000    # 300000
  warmup_iter: -1  # no warm up
  # fix_flow: 5000
  # flow_lr_mul: 0.125

  # losses
  pixel_opt:
    type: CharbonnierLoss
    loss_weight: 1.0
    reduction: mean

# validation settings
val:
  val_freq: !!float 5e3
  save_img: false

  metrics:
    psnr: # metric name, can be arbitrary
      type: calculate_psnr
      crop_border: 0
      test_y_channel: false
    ssim: # metric name, can be arbitrary
      type: calculate_ssim
      crop_border: 0
      test_y_channel: false

# logging settings
logger:
  print_freq: 100
  save_checkpoint_freq: !!float 5e3
  use_tb_logger: true
  wandb:
    project: ~
    resume_id: ~

# dist training settings
dist_params:
  backend: nccl
  port: 29500

find_unused_parameters: true
