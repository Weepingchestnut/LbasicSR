# general settings
name: 104_EDVR_saup_L_SR_REDS_asBI
model_type: ASEDVRModel
# scale: 4
num_gpu: 1  # set num_gpu: 0 for cpu mode
manual_seed: 10

# dataset and data loader settings
datasets:
  train:
    name: REDS
    type: ASREDSDataset
    # dataroot_gt: datasets/REDS/train_sharp
    # dataroot_lq: datasets/REDS/train_sharp_bicubic/X4
    dataroot_gt: datasets/REDS/train_sharp_with_val.lmdb
    dataroot_lq: datasets/REDS/train_sharp_bicubic_with_val.lmdb
    meta_info_file: lbasicsr/data/meta_info/meta_info_REDS_GT.txt
    val_partition: REDS4  # set to 'official' when use the official validation partition
    io_backend:
      type: lmdb

    num_frame: 5
    # arbitrary scale dataset --------------------------
    lq_size: 60
    max_scale: 4                        # max GT patch: lq_size*max_scale
    downsample_mode: torch              # [torch, core, numpy]
    init_int_scale: true                # scale x2, x3, x4 for 1 epoch
    single_scale_ft: false              # only a scale
    # CL_train_set: [120, 3, 5]         # Continuous learning training strategy
    # --------------------------------------------------
    gt_size: 256                        # if ASREDSDataset, not needed
    interval_list: [1]
    random_reverse: false
    use_hflip: true
    use_rot: true

    # data loader
    num_worker_per_gpu: 4
    batch_size_per_gpu: 4
    dataset_enlarge_ratio: 200
    prefetch_mode: ~

  val_1:
    name: REDS4_x4
    type: ASVideoTestDataset
    dataroot_gt: datasets/REDS/train_sharp
    dataroot_lq: datasets/REDS/train_sharp_bicubic/X4
    meta_info_file: lbasicsr/data/meta_info/meta_info_REDS4_test_GT.txt
    # change to 'meta_info_REDSofficial4_test_GT' when use the official validation partition
    io_backend:
      type: disk

    cache_data: false
    num_frame: 5
    padding: reflection_circle
    # arbitrary scale dataset --------------------------
    use_arbitrary_scale_downsampling: true
    downsampling_scale: !!python/tuple [4, 4]
    downsampling_mode: torch
    # --------------------------------------------------

  val_2:
    name: REDS4_x3
    type: ASVideoTestDataset
    dataroot_gt: datasets/REDS/train_sharp
    dataroot_lq: datasets/REDS/train_sharp_bicubic/X4
    meta_info_file: lbasicsr/data/meta_info/meta_info_REDS4_test_GT.txt
    # change to 'meta_info_REDSofficial4_test_GT' when use the official validation partition
    io_backend:
      type: disk

    cache_data: false
    num_frame: 5
    padding: reflection_circle
    # arbitrary scale dataset --------------------------
    use_arbitrary_scale_downsampling: true
    downsampling_scale: !!python/tuple [3, 3]
    downsampling_mode: torch
    # --------------------------------------------------

  val_3:
    name: REDS4_x2
    type: ASVideoTestDataset
    dataroot_gt: datasets/REDS/train_sharp
    dataroot_lq: datasets/REDS/train_sharp_bicubic/X4
    meta_info_file: lbasicsr/data/meta_info/meta_info_REDS4_test_GT.txt
    # change to 'meta_info_REDSofficial4_test_GT' when use the official validation partition
    io_backend:
      type: disk

    cache_data: false
    num_frame: 5
    padding: reflection_circle
    # arbitrary scale dataset --------------------------
    use_arbitrary_scale_downsampling: true
    downsampling_scale: !!python/tuple [2, 2]
    downsampling_mode: torch
    # --------------------------------------------------

# network structures
network_g:
  # ema_decay: 0.999
  type: EDVR_saup
  num_in_ch: 3
  num_out_ch: 3
  num_feat: 128
  num_frame: 5
  deformable_groups: 8
  num_extract_block: 5
  num_reconstruct_block: 40
  center_frame_idx: ~
  hr_in: false
  with_predeblur: false
  with_tsa: true

# path
path:
  pretrain_network_g: experiments/pretrained_models/EDVR/EDVR_L_x4_SR_REDS_official-9f5f5039.pth
  strict_load_g: false
  resume_state: ~

# training settings
train:
  ema_decay: 0.999
  optim_g:
    type: Adam
    # lr: !!float 4e-4
    lr: !!float 2e-4
    weight_decay: 0
    betas: [0.9, 0.99]

  scheduler:
    type: CosineAnnealingRestartLR
    # periods: [50000, 100000, 150000, 150000, 150000]
    # restart_weights: [1, 0.5, 0.5, 0.5, 0.5]
    periods: [50000, 100000]
    restart_weights: [1, 0.5]
    eta_min: !!float 1e-7

  # total_iter: 600000
  total_iter: 100000
  warmup_iter: -1  # no warm up
  # tsa_iter: 50000
  # dcn_lr_mul: 1

  # losses
  pixel_opt:
    type: CharbonnierLoss
    loss_weight: 1.0
    reduction: sum

# validation settings
val:
  val_freq: !!float 5e3
  save_img: false

  metrics:
    psnr: # metric name, can be arbitrary
      type: calculate_psnr
      crop_border: 0
      test_y_channel: false
    ssim: # metric name, can be arbitrary
      type: calculate_ssim
      crop_border: 0
      test_y_channel: false

# logging settings
logger:
  print_freq: 100
  save_checkpoint_freq: !!float 5e3
  use_tb_logger: true
  wandb:
    project: ~
    resume_id: ~

# dist training settings
dist_params:
  backend: nccl
  port: 29500

find_unused_parameters: true
