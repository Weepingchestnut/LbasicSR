# general settings
name: OVSR_govsr_8+4_80_REDS_BIx4
model_type: OVSRModel
scale: 4
num_gpu: 1  # set num_gpu: 0 for cpu mode
manual_seed: 0

# dataset and data loader settings
datasets:
  train:
    name: REDS
    type: REDSRecurrentDataset
    # dataroot_gt: datasets/REDS/train_sharp
    # dataroot_lq: datasets/REDS/train_sharp_bicubic/X4
    dataroot_gt: datasets/REDS/train_sharp_with_val.lmdb
    dataroot_lq: datasets/REDS/train_sharp_bicubic_with_val.lmdb
    meta_info_file: lbasicsr/data/meta_info/meta_info_REDS_GT.txt
    val_partition: REDS4  # set to 'official' when use the official validation partition
    test_mode: False
    io_backend:
      # type: disk
      type: lmdb

    num_frame: 9
    gt_size: 256
    interval_list: [1]
    random_reverse: false
    use_hflip: true
    use_rot: true

    # data loader
    num_worker_per_gpu: 8
    batch_size_per_gpu: 16
    dataset_enlarge_ratio: 200
    prefetch_mode: ~

  val:
    name: REDS4
    type: VideoRecurrentTestDataset
    dataroot_gt: datasets/REDS4/GT
    dataroot_lq: datasets/REDS4/sharp_bicubic

    cache_data: true
    io_backend:
      type: disk

    num_frame: -1  # not needed

# network structures
network_g:
  type: OVSR
  num_feat: 80
  num_pb: 8               # number of residual blocks in the precursor
  num_sb: 4               # number of residual blocks in the successor
  scale: 4                # sr scale
  num_frame: 3            # we adopt one frame from the past, present, and future respectively
  kind: 'global'          # local or global

# path
path:
  pretrain_network_g: ~
  strict_load_g: true
  resume_state: ~

# training settings
train:
  alpha: 0.01             # hyper-parameter to adjust the weight of precursor in loss, 0.01 and 0.1 for global and local should be fine
  sub_frame: 1            # number of frames at the beginning and the end not used for computing the loss during training
  ema_decay: 0.999
  optim_g:
    type: Adam
    lr: !!float 1e-3
    weight_decay: 0
    betas: [ 0.9, 0.99 ]

  scheduler:
    type: MultiStepLR
    milestones: [120000]
    gamma: 0.1

  total_iter: 400000
  warmup_iter: -1  # no warm up

  # losses
  pixel_opt:
    type: CharbonnierLoss
    loss_weight: 1.0
    reduction: mean

# validation settings
val:
  val_freq: !!float 5e3
  save_img: false

  metrics:
    psnr: # metric name, can be arbitrary
      type: calculate_psnr
      crop_border: 0
      test_y_channel: false
    ssim:
      type: calculate_ssim
      crop_border: 0
      test_y_channel: false

# logging settings
logger:
  print_freq: 100
  save_checkpoint_freq: !!float 5e3
  use_tb_logger: true
  wandb:
    project: ~
    resume_id: ~

# dist training settings
dist_params:
  backend: nccl
  port: 29500
